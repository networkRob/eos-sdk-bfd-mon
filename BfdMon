#!/usr/bin/python

# Copyright (c) 2018, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# eos-sdk-bfdMon
#
#    Written by:
#       Rob Martin, Arista Networks
#

"""
This EOS SDK script will mount the state of BFD so a 
SNMP Trap could be triggered off of it
"""

import eossdk
import syslog
import sys
import time
import re

__author__ = 'rmartin'
__version__ = 1.2


class BFDMON(eossdk.AgentHandler,eossdk.BfdSessionHandler):
    def __init__(self, bfdMgr, agentMgr):
        eossdk.AgentHandler.__init__(self,agentMgr)
        eossdk.BfdSessionHandler.__init__(self,bfdMgr)
        self.tracer = eossdk.Tracer("EosSdkBFDMonitor")
        self.bfdMgr_ = bfdMgr
        self.agentMgr_ = agentMgr
        self.numBFDChanges_ = 0
        self.tracer.trace0("Constructed")
        self.peers = {}

    def on_initialized(self): 
        self.tracer.trace0("We are initialized!")
        self.agentMgr_.status_set("Total BFD Peer/State changes","0")
        self.watch_all_bfd_sessions(True)
        self.to_syslog('BFD Agent Initialized')

    def to_syslog(self,sys_msg):
        syslog.syslog("%%myBFD-6-LOG: BFD State Change: %s"%sys_msg)
    
    def _create_session(self,r_peer):
        self.bfdMgr_.session_set(eossdk.BfdSessionKey(eossdk.IpAddr(self.peers[r_peer]['ip']),self.peers[r_peer]['vrf'],eossdk.BFD_SESSION_TYPE_NORMAL,eossdk.IntfId(self.peers[r_peer]['intf'])))
    
    def _update_status(self):
        for r1 in self.bfdMgr_.session_iter():
            bfdPeer = 'Peer'
            bfdState = self._get_status(self.bfdMgr_.session_status(r1))
            bfdIP = r1.ip_addr().to_string()
            for r2 in self.peers.keys():
                if self.peers[r2]['ip'] == bfdIP:
                    bfdPeer = r2
                    bfdCount = self.peers[r2]['stat_chg']
                    bfdTime = self.peers[r2]['last']
            self.agentMgr_.status_set("[%s] Status: [%s on %s]"%(bfdPeer,r1.ip_addr().to_string(),r1.intf().to_string()), bfdState)
            self.agentMgr_.status_set("[%s] Last Status Change: [%s on %s]"%(bfdPeer,r1.ip_addr().to_string(),r1.intf().to_string()),bfdTime)
            self.agentMgr_.status_set("[%s] Status Change Total: [%s on %s]"%(bfdPeer,r1.ip_addr().to_string(),r1.intf().to_string()),str(bfdCount))
    
    def _get_status(self,operState):
        if operState == eossdk.BFD_SESSION_STATUS_UP:
            return('UP')
        elif operState == eossdk.BFD_SESSION_STATUS_DOWN:
            return('DOWN')
        elif operState == eossdk.BFD_SESSION_STATUS_INIT:
            return('INITIALIZING')
        elif operState == eossdk.BFD_SESSION_STATUS_ADMIN_DOWN:
            return('ADMIN DOWN')
        elif operState == eossdk.BFD_SESSION_STATUS_NULL:
            return('NULL')
        else:
            return('NA')

    def on_agent_option(self,optionName, value):
        #Takes option configurations for BFD Peers to monitor
        if not self.peers.viewkeys():
            self.peers = {optionName:{'last':'N/A','stat_chg':0}}
        elif not self.peers.has_key(optionName):
            self.peers[optionName] = {'last':'N/A','stat_chg':0}
        o_value = value.split(',')
        if re.match(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$",o_value[0]):
            self.peers[optionName]['ip'] = o_value[0]
        if re.match(r"Ethernet\d+$",o_value[1],re.IGNORECASE) or re.match(r"Ethernet\d+//?\d+$",o_value[1],re.IGNORECASE):
            eth_val = o_value[1].capitalize()
            self.peers[optionName]['intf'] = eth_val
        elif re.match(r"Eth\d+$",o_value[1],re.IGNORECASE) or re.match(r"Eth\d+//?\d+$",o_value[1],re.IGNORECASE):
            eth_val = o_value[1].lower().replace('eth','Ethernet')
            self.peers[optionName]['intf'] = eth_val
        if len(o_value) == 3:
            b_vrf = o_value[2]
        else:
            b_vrf = 'default'
        self.peers[optionName]['vrf'] = b_vrf
        if self.peers[optionName].has_key('ip') and self.peers[optionName].has_key('intf') and self.peers[optionName].has_key('vrf'):
            self._create_session(optionName)
        self._update_status()

    def on_bfd_session_status(self, bfdId, operState):
        """ Callback provided by BfdSessionHandler when a BFD status changes """
        self.numBFDChanges_ += 1
        bfdState = self._get_status(operState)
        self.to_syslog("Peer %s on %s is %s"%(bfdId.ip_addr().to_string(),bfdId.intf().to_string(),bfdState))
        self.tracer.trace5("The state of " + bfdId.ip_addr().to_string() + " is now " + bfdState)
        # Update this agent's status with new statistics:
        self.agentMgr_.status_set("Total BFD Peer/State changes", str(self.numBFDChanges_))
        lastChangeTime = re.sub( ' +', ' ', time.ctime() )
        for r1 in self.peers.keys():
            if self.peers[r1]['ip'] == bfdId.ip_addr().to_string():
                self.peers[r1]['stat_chg'] += 1
                self.peers[r1]['last'] = lastChangeTime
        self._update_status()
        

if __name__ == '__main__':
    syslog.openlog('myBFDLog',0,syslog.LOG_LOCAL4)
    sdk = eossdk.Sdk()
    _ = BFDMON(sdk.get_bfd_session_mgr(),sdk.get_agent_mgr())
    sdk.main_loop(sys.argv)