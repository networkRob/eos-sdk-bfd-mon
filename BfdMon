#!/usr/bin/python

# Copyright (c) 2018, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# eos-sdk-bfdMon
#
#    Written by:
#       Rob Martin, Arista Networks
#

"""
This EOS SDK script will mount the state of BFD so a 
SNMP Trap could be triggered off of it
"""

import eossdk
import syslog
import sys
import time
import re
import ctypes as ct

__author__ = 'rmartin'
__version__ = 1.1

class BFDMON(eossdk.AgentHandler,eossdk.BfdSessionHandler,eossdk.BfdInterval):
    def __init__(self, bfdMgr, agentMgr):
        eossdk.AgentHandler.__init__(self,agentMgr)
        eossdk.BfdSessionHandler.__init__(self,bfdMgr)
        #eossdk.BfdInterval.__init__(self,ct.c_uint16(100),ct.c_uint16(100),ct.c_uint8(3))
        self.tracer = eossdk.Tracer("EosSdkBFDMonitor")
        self.bfdMgr_ = bfdMgr
        self.agentMgr_ = agentMgr
        self.numBFDChanges_ = 0
        self.tracer.trace0("Constructed")

    def on_initialized(self): 
        self.tracer.trace0("We are initialized!")
        self.agentMgr_.status_set("Total BFD changes","0")
        syslog.syslog("%%myBFD-6-LOG: Status: %s"%' Initialized')
        self.watch_all_bfd_sessions(True)
        #self.agentMgr_.status_set('bfd',str(dir(self.bfdMgr_)))
        self.agentMgr_.status_set('default interval 1',self.bfdMgr_.default_interval().to_string())
        #self.bfdMgr_.default_interval_is(200,200,1)
        self.agentMgr_.status_set('default interval 2',self.bfdMgr_.default_interval().to_string())
        #self.bfdMgr_.watch_all_bfd_sessions(True)
        self.sess = self.bfdMgr_.session_iter()
        self.agentMgr_.status_set('dir',str(dir(self.sess)))

    def on_bfd_session_status(self, bfdID, operState):
        """ Callback provided by BfdSessionHandler when a BFD status
        changes """
        #Adding in this syslog message for debugging to see if this function ever gets called
        syslog.syslog("%%myBFD-6-LOG: BFD State Change: %s"%'mBFD Agent Status Change')
        self.numBFDChanges_ += 1
        if operState == eossdk.BFD_SESSION_STATUS_UP:
            bfdState = 'UP'
        elif operState == eossdk.BFD_SESSION_STATUS_DOWN:
            bfdState = 'DOWN'
        elif operState == eossdk.BFD_SESSION_STATUS_INIT:
            bfdState = 'INIT'
        elif operState == eossdk.BFD_SESSION_STATUS_ADMIN_DOWN:
            bfdState = 'ADMIN DOWN'
        elif operState == eossdk.BFD_SESSION_STATUS_NULL:
            bfdState = 'NULL'
        else:
            bfdState = 'NA'
        lastChangeTime = re.sub( ' +', ' ', time.ctime() )
        self.tracer.trace5("The state of " + bfdID.to_string() + " is now " + bfdState)
        # Update this agent's status with new statistics:
        self.agentMgr_.status_set("Total BFD changes", str(self.numBFDChanges_))
        self.agentMgr_.status_set("Last change of " + bfdID.to_string(), bfdState)
        self.agentMgr_.status_set("Last change time of " + bfdID.to_string(), lastChangeTime)


if __name__ == '__main__':
    syslog.openlog('myBFDLog',0,syslog.LOG_LOCAL4)
    sdk = eossdk.Sdk()
    _ = BFDMON(sdk.get_bfd_session_mgr(),sdk.get_agent_mgr())
    sdk.main_loop(sys.argv)